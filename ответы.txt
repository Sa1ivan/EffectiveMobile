  1) Event Propagation
    В браузере события идут тремя фазами: сначала сверху вниз — это capturing, потом на самом элементе, потом снизу вверх — bubbling. По умолчанию мы ловим на всплытии. Это полезно, например, для делегирования: вешаем обработчик на список, а клики ловим на дочках. Если нужно — можно остановить распространение через stopPropagation(), или ловить на стадии захвата через capture: true.

  2) Promise, async, Event Loop
    Promise — это обёртка для асинхронного кода. У него три состояния: pending, fulfilled и rejected. Работать с ним можно через .then/.catch, либо через async/await — это просто более удобный синтаксис.
    Вся эта асинхронщина работает благодаря Event Loop: он сначала выполняет весь синхронный код, потом обрабатывает микрозадачи (типа .then), а потом макрозадачи (setTimeout, обработчики событий). Поэтому Promise всегда выполняется чуть раньше, чем таймер.

  3) ООП в JS
    ООП — это подход, где код строится вокруг объектов. Основные принципы: инкапсуляция (прячем детали, оставляем интерфейс), наследование (повторное использование кода), полиморфизм (одинаковый интерфейс — разная реализация) и абстракция (отделяем важное от деталей).
    В JavaScript ООП реализовано через прототипы. Но есть удобный синтаксис class, где можно писать конструкторы, наследование через extends, приватные поля через _. На самом деле это просто сахар над прототипным наследованием.

  4) Как браузер открывает сайт
    Когда мы вводим адрес в строке: браузер ищет IP через DNS, устанавливает соединение. Потом отправляет запрос на сервер, получает HTML. HTML парсится, после строится DOM. Загружаются CSS, после строится CSSOM.Вместе они превращаются в render tree (это дерево только тех узлов, которые реально нужно отрисовать (например, теги <head> туда не попадут, а display: none-элементы тоже пропускаются).
    Потом идёт layout (браузеру нужно понять размеры и позиции элементов на странице: ширину, высоту, где они находятся относительно других) и отрисовка на экране.
    JS может остановить парсинг (например, если скрипт без defer/async), поэтому оптимизация важна: использовать кеширование, CDN, lazy-loading картинок, prefetch.
    Из проблем — CORS, XSS, CSRF, mixed content. То есть безопасность и ограничения при работе с другими доменами.
